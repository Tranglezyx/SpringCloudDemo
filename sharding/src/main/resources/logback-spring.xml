<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="10 seconds" debug="false">
    <!-- 引入logback默认配置 -->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <!-- 项目工程端口号 -->
    <springProperty scope="context" name="port" source="server.port"/>
    <!-- 项目工程名称 -->
    <springProperty scope="context" name="springAppName" source="spring.application.name"/>
    <property name="LOG_FILE" value="D:/logs/${springAppName}/"/>
    <!-- 日志输出目录 -->
    <springProfile name="local,dev">
        <!-- 本地环境、开发环境 日志输出目录-->
        <property name="LOG_FILE" value="D:/logs/${springAppName}/"/>
    </springProfile>
    <springProfile name="test,show,prod">
        <!-- 测试环境、预演环境、生产环境 日志输出目录-->
        <property name="LOG_FILE" value="/application/logs/${springAppName}/"/>
    </springProfile>

    <!-- 日志格式化输出：%clr表示行号 %d表示日期 {faint}标表示白色 %-5level:级别从左显示5个字符宽度 [springAppName:服务名称,TraceId:跟踪Id,SpanId:跨度Id,ParentSpanId:父跨度Id,Span-Export:跨度出口]  PID:进程pid %15.15t:进程名 %-40.40logger{39}:类名 %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}:日志内容 -->
<!--    <property name="CONSOLE_LOG_PATTERN"-->
<!--              value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){red} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(-){faint} %clr([%clr(%thread,%M,%L){faint}]){faint} %clr(%logger{10}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>-->
        <property name="CONSOLE_LOG_PATTERN"
                  value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread-%M-%L] %logger{10} [%X{traceId}]-%msg%n"/>

    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf-8</charset>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件输出格式-->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>utf-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${LOG_FILE}${springAppName}-${port}-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--日志文件保留天数-->
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 最大5000MB 超过最大值，会重新建一个文件-->
                <maxFileSize>5000MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 此日志文件只记录info级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 日志记录器,日期滚动记录 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件输出格式-->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>utf-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}/error/${springAppName}-${port}-error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!--日志文件保留天数-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!-- 此日志文件只记录error级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="ASYNC_STDOUT" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>51200</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="STDOUT"/>
        <!-- add the following line -->
        <includeCallerData>true</includeCallerData>
    </appender>

    <appender name="ASYNC_INFO_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0.8</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>51200</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="INFO_FILE"/>
    </appender>

    <appender name="ASYNC_ERROR_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="ERROR_FILE"/>
    </appender>

    <!-- 执行SQL语句控制台打印 -->
<!--    <logger name="org.mybatis" level="DEBUG"/>-->
<!--    <logger name="org.apache.ibatis.jdbc" level="DEBUG"/>-->

    <root level="INFO">
<!--        <appender-ref ref="ASYNC_STDOUT"/>-->
<!--        <appender-ref ref="ASYNC_INFO_FILE"/>-->
<!--        <appender-ref ref="STDOUT"/>-->
        <appender-ref ref="INFO_FILE"/>
    </root>

    <!-- 本地环境/开发环境 日志输出级别 DEBUG -->
    <springProfile name="local">
        <!-- 日志输出级别 -->
        <root level="INFO">
            <appender-ref ref="ASYNC_STDOUT"/>
        </root>
    </springProfile>

    <!-- 测试环境 日志输出级别 info -->
    <springProfile name="dev,test">
        <root level="INFO">
            <appender-ref ref="ASYNC_STDOUT"/>
            <appender-ref ref="ASYNC_INFO_FILE"/>
            <appender-ref ref="ASYNC_ERROR_FILE"/>
        </root>
    </springProfile>

    <!-- 预演环境/生产环境 日志输出级别 info -->
    <springProfile name="show,prod">
        <!-- 日志输出级别 -->
        <root level="INFO">
            <appender-ref ref="ASYNC_STDOUT"/>
            <appender-ref ref="ASYNC_INFO_FILE"/>
            <appender-ref ref="ASYNC_ERROR_FILE"/>
        </root>
    </springProfile>

</configuration>